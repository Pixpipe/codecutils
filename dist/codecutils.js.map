{"version":3,"file":null,"sources":["../src/CodecUtils.js"],"sourcesContent":["/**\n* The CodecUtils class gather some static methods that can be useful while\n* encodeing/decoding data.\n* CodecUtils does not have a constructor, don't try to instanciate it.\n*/\nclass CodecUtils {\n\n\n  /**\n  * Get whether or not the platform is using little endian.\n  * @return {Boolen } true if the platform is little endian, false if big endian\n  */\n  static isPlatformLittleEndian() {\n    var a = new Uint32Array([0x12345678]);\n    var b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\n    return (b[0] != 0x12);\n  }\n\n\n  /**\n  * convert an ArrayBuffer into a unicode string (2 bytes for each char)\n  * @param {ArrayBuffer} buf - input ArrayBuffer\n  * @return {String} a string compatible with Unicode characters\n  */\n  static arrayBufferToString16( buf ) {\n    return String.fromCharCode.apply(null, new Uint16Array(buf));\n  }\n\n\n  /**\n  * convert a unicode string into an ArrayBuffer\n  * Note that the str is a regular string but it will be encoded with\n  * 2 bytes per char instead of 1 ( ASCII uses 1 byte/char )\n  * @param {String} str - string to encode\n  * @return {ArrayBuffer} the output ArrayBuffer\n  */\n  static string16ToArrayBuffer( str ) {\n    var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char\n    var bufView = new Uint16Array(buf);\n    for (var i=0; i < str.length; i++) {\n      bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n  }\n\n\n  /**\n  * Convert an ArrayBuffer into a ASCII string (1 byte for each char)\n  * @param {ArrayBuffer} buf - buffer to convert into ASCII string\n  * @return {String} the output string\n  */\n  static arrayBufferToString8( buf ) {\n    return String.fromCharCode.apply(null, new Uint8Array(buf));\n  }\n\n\n  /**\n  * Convert a ASCII string into an ArrayBuffer.\n  * Note that the str is a regular string, it will be encoded with 1 byte per char\n  * @param {String} str - string to encode\n  * @return {ArrayBuffer}\n  */\n  static string8ToArrayBuffer( str ) {\n    var buf = new ArrayBuffer(str.length);\n    var bufView = new Uint8Array(buf);\n    for (var i=0; i < str.length; i++) {\n      bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n  }\n\n\n  /**\n  * Write a ASCII string into a buffer\n  * @param {String} str - a string that contains only ASCII characters\n  * @param {ArrayBuffer} buffer - the buffer where to write the string\n  * @param {Number} byteOffset - the offset to apply, in number of bytes\n  */\n  static setString8InBuffer( str, buffer, byteOffset = 0 ){\n    if( byteOffset < 0){\n      console.warn(\"The byte offset cannot be negative.\");\n      return;\n    }\n\n    if( !buffer || !(buffer instanceof ArrayBuffer)){\n      console.warn(\"The buffer must be a valid ArrayBuffer.\");\n      return;\n    }\n\n    if( (str.length + byteOffset) > buffer.byteLength ){\n      console.warn(\"The string is too long to be writen in this buffer.\");\n      return;\n    }\n\n    var bufView = new Uint8Array(buffer);\n\n    for (var i=0; i < str.length; i++) {\n      bufView[i + byteOffset] = str.charCodeAt(i);\n    }\n  }\n\n\n  /**\n  * Extract an ASCII string from an ArrayBuffer\n  * @param {ArrayBuffer} buffer - the buffer\n  * @param {Number} strLength - number of chars in the string we want\n  * @param {Number} byteOffset - the offset in number of bytes\n  * @return {String} the string, or null in case of error\n  */\n  static getString8FromBuffer( buffer, strLength, byteOffset=0 ){\n    if( byteOffset < 0){\n      console.warn(\"The byte offset cannot be negative.\");\n      return null;\n    }\n\n    if( !buffer || !(buffer instanceof ArrayBuffer)){\n      console.warn(\"The buffer must be a valid ArrayBuffer.\");\n      return null;\n    }\n\n    if( (strLength + byteOffset) > buffer.byteLength ){\n      console.warn(\"The string is too long to be writen in this buffer.\");\n      return null;\n    }\n\n    return String.fromCharCode.apply(null, new Uint8Array(buffer, byteOffset, strLength));\n  }\n\n\n  /**\n  * Serializes a JS object into an ArrayBuffer.\n  * This is using a unicode JSON intermediate step.\n  * @param {Object} obj - an object that does not have cyclic structure\n  * @return {ArrayBuffer} the serialized output\n  */\n  static objectToArrayBuffer( obj ){\n    var buff = null;\n\n    try{\n      var strObj = JSON.stringify( obj );\n      buff = CodecUtils.string16ToArrayBuffer(strObj)\n    }catch(e){\n      console.warn(e);\n    }\n\n    return buff;\n  }\n\n\n  /**\n  * Convert an ArrayBuffer into a JS Object. This uses an intermediate unicode JSON string.\n  * Of course, this buffer has to come from a serialized object.\n  * @param {ArrayBuffer} buff - the ArrayBuffer that hides some object\n  * @return {Object} the deserialized object\n  */\n  static ArrayBufferToObject( buff ){\n    var obj = null;\n\n    try{\n      var strObj = CodecUtils.arrayBufferToString16( buff );\n      obj = JSON.parse( strObj )\n    }catch(e){\n      console.warn(e);\n    }\n\n    return obj;\n  }\n\n\n  /**\n  * Get if wether of not the arg is a typed array\n  * @param {Object} obj - possibly a typed array, or maybe not\n  * @return {Boolean} true if obj is a typed array\n  */\n  static isTypedArray( obj ){\n    return ( obj instanceof Int8Array         ||\n             obj instanceof Uint8Array        ||\n             obj instanceof Uint8ClampedArray ||\n             obj instanceof Int16Array        ||\n             obj instanceof Uint16Array       ||\n             obj instanceof Int32Array        ||\n             obj instanceof Uint32Array       ||\n             obj instanceof Float32Array      ||\n             obj instanceof Float64Array )\n  }\n\n\n  /**\n  * Merge some ArrayBuffes in a single one\n  * @param {Array} arrayOfBuffers - some ArrayBuffers\n  * @return {ArrayBuffer} the larger merged buffer\n  */\n  static mergeBuffers( arrayOfBuffers ){\n    var totalByteSize = 0;\n\n    for(var i=0; i<arrayOfBuffers.length; i++){\n      totalByteSize += arrayOfBuffers[i].byteLength;\n    }\n\n    var concatArray = new Uint8Array( totalByteSize );\n\n    var offset = 0\n    for(var i=0; i<arrayOfBuffers.length; i++){\n      concatArray.set( new Uint8Array(arrayOfBuffers[i]), offset);\n      offset += arrayOfBuffers[i].byteLength\n    }\n\n    return concatArray.buffer;\n  }\n\n\n  /**\n  * In a browser, the global object is `window` while in Node, it's `GLOBAL`.\n  * This method return the one that is relevant to the execution context.\n  * @return {Object} the global object\n  */\n  static getGlobalObject(){\n    var constructorHost = null;\n\n    try{\n      constructorHost = window; // in a web browser\n    }catch( e ){\n      try{\n        constructorHost = GLOBAL; // in node\n      }catch( e ){\n        console.warn( \"You are not in a Javascript environment?? Weird.\" );\n        return null;\n      }\n    }\n    return constructorHost;\n  }\n\n\n  /**\n  * Extract a typed array from an arbitrary buffer, with an arbitrary offset\n  * @param {ArrayBuffer} buffer - the buffer from which we extract data\n  * @param {Number} byteOffset - offset from the begining of buffer\n  * @param {Function} arrayType - function object, actually the constructor of the output array\n  * @param {Number} numberOfElements - nb of elem we want to fetch from the buffer\n  * @return {TypedArray} output of type given by arg arrayType - this is a copy, not a view\n  */\n  static extractTypedArray( buffer, byteOffset, arrayType, numberOfElements ){\n    if( !buffer ){\n      console.warn(\"Input Buffer is null.\");\n      return null;\n    }\n\n    if(! (buffer instanceof ArrayBuffer) ){\n      console.warn(\"Buffer must be of type ArrayBuffer\");\n      return null;\n    }\n\n    if(numberOfElements <= 0){\n      console.warn(\"The number of elements to fetch must be greater than 0\");\n      return null;\n    }\n\n    if(byteOffset < 0){\n      console.warn(\"The byte offset must be possitive or 0\");\n      return null;\n    }\n\n    if( byteOffset >= buffer.byteLength ){\n      console.warn(\"The offset cannot be larger than the size of the buffer.\");\n      return null;\n    }\n\n    if( arrayType instanceof Function && !(\"BYTES_PER_ELEMENT\" in arrayType)){\n      console.warn(\"ArrayType must be a typed array constructor function.\");\n      return null;\n    }\n\n    if( arrayType.BYTES_PER_ELEMENT * numberOfElements + byteOffset > buffer.byteLength ){\n      console.warn(\"The requested number of elements is too large for this buffer\");\n      return;\n    }\n\n    var slicedBuff = buffer.slice(byteOffset, byteOffset + numberOfElements*arrayType.BYTES_PER_ELEMENT)\n    return new arrayType( slicedBuff )\n  }\n\n\n  /**\n  * Get some info about the given TypedArray\n  * @param {TypedArray} typedArray - one of the typed array\n  * @return {Object} in form of {type: String, signed: Boolean, bytesPerElements: Number, byteLength: Number, length: Number}\n  */\n  getTypedArrayInfo( typedArray ){\n    var type = null;\n    var signed = false;\n\n    if( typedArray instanceof Int8Array ){\n      type = \"int\";\n      signed = false;\n    }else if( typedArray instanceof Uint8Array ){\n      type = \"int\";\n      signed = true;\n    }else if( typedArray instanceof Uint8ClampedArray ){\n      type = \"int\";\n      signed = true;\n    }else if( typedArray instanceof Int16Array ){\n      type = \"int\";\n      signed = false;\n    }else if( typedArray instanceof Uint16Array ){\n      type = \"int\";\n      signed = true;\n    }else if( typedArray instanceof Int32Array ){\n      type = \"int\";\n      signed = false;\n    }else if( typedArray instanceof Uint32Array ){\n      type = \"int\";\n      signed = true;\n    }else if( typedArray instanceof Float32Array ){\n      type = \"float\";\n      signed = false;\n    }else if( typedArray instanceof Float64Array ){\n      type = \"float\";\n      signed = false;\n    }\n\n    return {\n      type: type,\n      signed: signed,\n      bytesPerElements: typedArray.BYTES_PER_ELEMENT,\n      byteLength: typedArray.byteLength,\n      length: typedArray.length\n    }\n  }\n\n} /* END of class CodecUtils */\n\nexport { CodecUtils }\n"],"names":[],"mappings":"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"}